"""
Django settings for vontor_cz project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os

from pathlib import Path

from django.core.management.utils import get_random_secret_key

from django.conf import settings

from django.db import OperationalError, connections
from dotenv import load_dotenv



load_dotenv()  # Pouze načte proměnné lokálně, pokud nejsou dostupné


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv("DEBUG", False) in ["True", "true", True]:
    DEBUG = True
else:
    DEBUG = False

    
print(".env DEBUG: " + str(os.getenv("DEBUG", False)))
print("Actual state of DEBUG: " + str(DEBUG))



ALLOWED_HOSTS = ["stingray-app-n7gfu.ondigitalocean.app", "www.vontor.cz", "vontor.cz", "localhost", "127.0.0.1"]
CSRF_TRUSTED_ORIGINS = ['https://vontor.cz', "https://www.vontor.cz"]
CSFR_ALLOWED_ORIGINS = ['https://vontor.cz', "https://www.vontor.cz"]
CORS_ORIGINS_WHITELIST = ['https://vontor.cz', "https://www.vontor.cz"]



#bezpečnost/SSL
if DEBUG is False:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
else:
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False

# Application definition
INSTALLED_APPS = [
    'daphne', #asgi bude fungovat lokálně (musí být na začátku)

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #'corsheaders',#cors

    'home',


    #'chat.apps.GlobalChatCheck', #tohle se spusti při každé django inicializaci (migration, createmigration, runserver)
    
    #'authentication',
    'api',

    'rest_framework',
    #have correct order when loading templates

    'django.contrib.sitemaps',

    'storages',# Adds support for external storage services like Amazon S3 via django-storages

    'channels' ,# django channels
    
    'django_cleanup.apps.CleanupConfig', #kvůli bugum je lepší to dát na poslední místo v INSTALLED_APPS
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",# Middleware that allows your backend to accept requests from other domains (CORS)
    "django.middleware.common.CommonMiddleware",

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    #CUSTOM
    #'tools.middleware.CustomMaxUploadSizeMiddleware',


    'whitenoise.middleware.WhiteNoiseMiddleware',# díky tomu funguje načítaní static files
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # For local testing
        # Use Redis in production:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("127.0.0.1", 6379)],
        # },
    }
}

ROOT_URLCONF = 'vontor_cz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


ASGI_APPLICATION = 'vontor_cz.asgi.application' #daphne


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE'),
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

#DATABASE HEALTCHECK
try:
    # Check if the default database connection is working
    connection = connections['default']
    connection.ensure_connection()
    print("Database connection is successful.")
except OperationalError:
    print("Database connection failed!")
    raise Exception("Database connection not available, shutting down!")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'vontor_cz.backend.EmailOrUsernameModelBackend', #custom backend z authentication aplikace
    'django.contrib.auth.backends.ModelBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Prague'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_COOKIE_AGE = 86400  # one day

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

LOGIN_URL = 'login'


#---------------------MEDIA + STATIC, AWS--------------------------

STATIC_ROOT = BASE_DIR / "collectedstaticfiles" 

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'globalstaticfiles',
]

# automaticky přidat static složku z app složek
for app in settings.INSTALLED_APPS:
    
    # přeskočení: django, custom a balíčku třetích stran
    if app.startswith('django.') or 'rest_framework' in app or '.' in app:
        continue

    # sestavení cesty k static složce
    app_path = Path(BASE_DIR, app.replace('.', '/'))
    # přidání 'static' k app cestě
    static_path = app_path / 'static'
    
    # kontrola jestli cesta k 'static' existuje
    if static_path.exists():
        STATICFILES_DIRS.append(static_path) #finální přidání cesty


if DEBUG:
    # Debug mode: Use local storage
    STORAGES = {
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {
                "location": os.path.join(BASE_DIR, "media"),
            },
        },
    }
else:
    # Production mode: Use S3
    STORAGES = {
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
                "region_name": os.getenv("AWS_S3_REGION_NAME"),
                "access_key": os.getenv("AWS_ACCESS_KEY_ID"),
                "secret_key": os.getenv("AWS_SECRET_ACCESS_KEY"),
                "default_acl": "public-read",
                "custom_domain": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.amazonaws.com",
            },
        },
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
                "region_name": os.getenv("AWS_S3_REGION_NAME"),
                "access_key": os.getenv("AWS_ACCESS_KEY_ID"),
                "secret_key": os.getenv("AWS_SECRET_ACCESS_KEY"),
            },
        },
    }


print("Static url: " + STATIC_URL)

#--------------------END-MEDIA-STATIC-SECTION------------------

# CKEditor 5 settings
CKEDITOR_5_BASEPATH = '/static/ckeditor5/'


customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],
        'language': 'cs',

    },
    'extends': {
        'language': 'cs',
        
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading',
                    '|',
                    'outdent',
                    'indent',
                    '|',
                    'bold',
                    'italic',
                    'link',
                    'underline',
                    'strikethrough',
                    'code',
                    'subscript',
                    'superscript',
                    'highlight',
                    '|',
                    'codeBlock',
                    'sourceEditing',
                    'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

CKEDITOR_5_ALLOW_ALL_FILE_TYPES = True

